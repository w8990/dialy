<template>
  <view class="publish-page">
    <!-- ÂØºËà™Ê†è -->
    <view class="navbar">
      <text class="nav-btn" @tap="goBack">ÂèñÊ∂à</text>
      <text class="title">ÂèëÂ∏ÉÂä®ÊÄÅ</text>
      <text class="nav-btn primary" @tap="publishPost">ÂèëÂ∏É</text>
    </view>
    
    <scroll-view class="content" scroll-y="true">
      <!-- ÂÜÖÂÆπËæìÂÖ•Âå∫ -->
      <view class="input-section">
        <textarea 
          class="content-input" 
          v-model="postContent"
          placeholder="ÂàÜ‰∫´‰Ω†ÁöÑÁîüÊ¥ª..." 
          :maxlength="maxLength"
          auto-height
        />
        <view class="char-count">{{ postContent.length }}/{{ maxLength }}</view>
      </view>
      
      <!-- Â™í‰ΩìÈÄâÊã©Âå∫ -->
      <view class="media-section">
        <view class="media-grid">
          <view 
            class="media-item" 
            v-for="(media, index) in mediaList" 
            :key="index"
          >
            <image v-if="media.type === 'image'" :src="media.url" class="media-preview" />
            <video v-if="media.type === 'video'" :src="media.url" class="media-preview" controls />
            <view class="media-remove" @tap="removeMedia(index)">√ó</view>
          </view>
          
          <!-- Ê∑ªÂä†Â™í‰ΩìÊåâÈíÆ -->
          <view class="add-media" @tap="showMediaOptions" v-if="mediaList.length < 9">
            <text class="add-icon">+</text>
          </view>
        </view>
      </view>
      
      <!-- ÂäüËÉΩÈÄâÈ°π -->
      <view class="options-section">
        <!-- ËØùÈ¢òÈÄâÊã© -->
        <view class="option-item" @tap="showTopicSelector">
          <text class="option-icon">#</text>
          <text class="option-text">Ê∑ªÂä†ËØùÈ¢ò</text>
          <view class="selected-topics" v-if="selectedTopics.length > 0">
            <text class="topic-tag" v-for="topic in selectedTopics" :key="topic">#{{ topic }}</text>
          </view>
        </view>
        
        <!-- ÂÆö‰ΩçÈÄâÊã© -->
        <view class="option-item" @tap="selectLocation">
          <text class="option-icon">üìç</text>
          <text class="option-text">{{ selectedLocation || 'Ê∑ªÂä†‰ΩçÁΩÆ' }}</text>
        </view>
        
        <!-- ÂèØËßÅËåÉÂõ¥ -->
        <view class="option-item" @tap="showVisibilityOptions">
          <text class="option-icon">üëÅ</text>
          <text class="option-text">{{ visibilityText }}</text>
        </view>
      </view>
    </scroll-view>
  </view>
</template>

<script setup lang="uts">
import { ref } from 'vue'
import { Media } from '../../utils/media.uts'
import { MEDIA_LIMITS, POST_VISIBILITY } from '../../utils/constants.uts'

// ÂÜÖÂÆπÁõ∏ÂÖ≥
const postContent = ref('')
const maxLength = MEDIA_LIMITS.POST_TEXT_MAX_LENGTH

// Â™í‰ΩìÊñá‰ª∂
const mediaList = ref<any[]>([])

// ËØùÈ¢òÊ†áÁ≠æ
const selectedTopics = ref<string[]>([])

// ‰ΩçÁΩÆ‰ø°ÊÅØ
const selectedLocation = ref('')

// ÂèØËßÅËåÉÂõ¥
const visibility = ref(POST_VISIBILITY.PUBLIC)
const visibilityText = ref('ÂÖ¨ÂºÄ')

// ËøîÂõû‰∏ä‰∏ÄÈ°µ
function goBack() {
  uni.navigateBack()
}

// ÊòæÁ§∫Â™í‰ΩìÈÄâÊã©ÈÄâÈ°π
function showMediaOptions() {
  uni.showActionSheet({
    itemList: ['ÊãçÁÖß', '‰ªéÁõ∏ÂÜåÈÄâÊã©', 'ÂΩïÂà∂ËßÜÈ¢ë', 'ÂΩïÈü≥'],
    success: (res) => {
      switch(res.tapIndex) {
        case 0:
          takePhoto()
          break
        case 1:
          chooseFromAlbum()
          break
        case 2:
          recordVideo()
          break
        case 3:
          recordAudio()
          break
      }
    }
  })
}

// ÊãçÁÖß
async function takePhoto() {
  try {
    const images = await Media.chooseImage(1)
    if (images.length > 0) {
      const mediaFile = await Media.uploadFile(images[0], 'image')
      mediaList.value.push(mediaFile)
    }
  } catch (error) {
    uni.showToast({
      title: 'ÊãçÁÖßÂ§±Ë¥•',
      icon: 'none'
    })
  }
}

// ‰ªéÁõ∏ÂÜåÈÄâÊã©
async function chooseFromAlbum() {
  try {
    const remainingCount = 9 - mediaList.value.length
    const images = await Media.chooseImage(remainingCount)
    
    if (images.length > 0) {
      const mediaFiles = await Media.uploadImages(images)
      mediaList.value.push(...mediaFiles)
    }
  } catch (error) {
    uni.showToast({
      title: 'ÈÄâÊã©ÂõæÁâáÂ§±Ë¥•',
      icon: 'none'
    })
  }
}

// ÂΩïÂà∂ËßÜÈ¢ë
async function recordVideo() {
  try {
    const videoPath = await Media.chooseVideo()
    const mediaFile = await Media.uploadVideo(videoPath)
    mediaList.value.push(mediaFile)
  } catch (error) {
    uni.showToast({
      title: 'ÂΩïÂà∂ËßÜÈ¢ëÂ§±Ë¥•',
      icon: 'none'
    })
  }
}

// ÂΩïÈü≥
async function recordAudio() {
  try {
    uni.showToast({
      title: 'ÂºÄÂßãÂΩïÈü≥',
      icon: 'none'
    })
    
    await Media.startRecord()
    
    // ÊòæÁ§∫ÂΩïÈü≥‰∏≠ÁöÑÁä∂ÊÄÅ
    setTimeout(async () => {
      try {
        const audioPath = await Media.stopRecord()
        const mediaFile = await Media.uploadAudio(audioPath)
        mediaList.value.push(mediaFile)
        
        uni.showToast({
          title: 'ÂΩïÈü≥ÂÆåÊàê',
          icon: 'success'
        })
      } catch (error) {
        uni.showToast({
          title: 'ÂΩïÈü≥Â§±Ë¥•',
          icon: 'none'
        })
      }
    }, 3000)
    
  } catch (error) {
    uni.showToast({
      title: 'ÂΩïÈü≥Â§±Ë¥•',
      icon: 'none'
    })
  }
}

// ÁßªÈô§Â™í‰ΩìÊñá‰ª∂
function removeMedia(index: number) {
  mediaList.value.splice(index, 1)
}

// ÊòæÁ§∫ËØùÈ¢òÈÄâÊã©Âô®
function showTopicSelector() {
  // TODO: ÂÆûÁé∞ËØùÈ¢òÈÄâÊã©Âô®
  uni.showToast({
    title: 'ËØùÈ¢òÈÄâÊã©ÂäüËÉΩÂºÄÂèë‰∏≠',
    icon: 'none'
  })
}

// ÈÄâÊã©‰ΩçÁΩÆ
function selectLocation() {
  uni.chooseLocation({
    success: (res) => {
      selectedLocation.value = res.name || res.address
    },
    fail: (error) => {
      console.error('ÈÄâÊã©‰ΩçÁΩÆÂ§±Ë¥•:', error)
    }
  })
}

// ÊòæÁ§∫ÂèØËßÅËåÉÂõ¥ÈÄâÈ°π
function showVisibilityOptions() {
  const options = ['ÂÖ¨ÂºÄ', 'Â•ΩÂèãÂèØËßÅ', '‰ªÖËá™Â∑±ÂèØËßÅ']
  
  uni.showActionSheet({
    itemList: options,
    success: (res) => {
      visibility.value = res.tapIndex + 1
      visibilityText.value = options[res.tapIndex]
    }
  })
}

// ÂèëÂ∏ÉÂä®ÊÄÅ
async function publishPost() {
  if (!postContent.value.trim() && mediaList.value.length === 0) {
    uni.showToast({
      title: 'ËØ∑ËæìÂÖ•ÂÜÖÂÆπÊàñÊ∑ªÂä†Â™í‰Ωì',
      icon: 'none'
    })
    return
  }
  
  try {
    uni.showLoading({
      title: 'ÂèëÂ∏É‰∏≠...'
    })
    
    // TODO: Ë∞ÉÁî®ÂèëÂ∏ÉAPI
    const postData = {
      content: postContent.value,
      media: mediaList.value,
      topics: selectedTopics.value,
      location: selectedLocation.value,
      visibility: visibility.value
    }
    
    console.log('ÂèëÂ∏ÉÊï∞ÊçÆ:', postData)
    
    // Ê®°ÊãüÂèëÂ∏ÉÊàêÂäü
    setTimeout(() => {
      uni.hideLoading()
      uni.showToast({
        title: 'ÂèëÂ∏ÉÊàêÂäü',
        icon: 'success'
      })
      
      // ËøîÂõûÈ¶ñÈ°µ
      uni.switchTab({
        url: '/pages/index/index'
      })
    }, 2000)
    
  } catch (error) {
    uni.hideLoading()
    uni.showToast({
      title: 'ÂèëÂ∏ÉÂ§±Ë¥•',
      icon: 'none'
    })
  }
}
</script>

<style scoped>
.publish-page {
  flex: 1;
  background-color: #f5f5f5;
}

.navbar {
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 44px 20px 16px;
  background-color: #ffffff;
  border-bottom: 1px solid #eeeeee;
}

.nav-btn {
  font-size: 16px;
  color: #666666;
  padding: 8px 12px;
}

.nav-btn.primary {
  color: #007AFF;
  font-weight: bold;
}

.title {
  font-size: 18px;
  font-weight: bold;
  color: #333333;
}

.content {
  flex: 1;
}

.input-section {
  background-color: #ffffff;
  padding: 20px;
  margin-bottom: 10px;
  position: relative;
}

.content-input {
  width: 100%;
  min-height: 120px;
  font-size: 16px;
  line-height: 1.5;
  color: #333333;
  background-color: transparent;
  border: none;
}

.char-count {
  position: absolute;
  bottom: 10px;
  right: 20px;
  font-size: 12px;
  color: #999999;
}

.media-section {
  background-color: #ffffff;
  padding: 20px;
  margin-bottom: 10px;
}

.media-grid {
  flex-direction: row;
  flex-wrap: wrap;
  gap: 10px;
}

.media-item {
  position: relative;
  width: 100px;
  height: 100px;
}

.media-preview {
  width: 100%;
  height: 100%;
  border-radius: 8px;
}

.media-remove {
  position: absolute;
  top: -5px;
  right: -5px;
  width: 20px;
  height: 20px;
  background-color: #ff4444;
  border-radius: 10px;
  color: #ffffff;
  text-align: center;
  line-height: 20px;
  font-size: 14px;
}

.add-media {
  width: 100px;
  height: 100px;
  background-color: #f8f8f8;
  border: 2px dashed #cccccc;
  border-radius: 8px;
  justify-content: center;
  align-items: center;
}

.add-icon {
  font-size: 24px;
  color: #cccccc;
}

.options-section {
  background-color: #ffffff;
}

.option-item {
  flex-direction: row;
  align-items: center;
  padding: 16px 20px;
  border-bottom: 1px solid #f5f5f5;
  gap: 12px;
}

.option-icon {
  font-size: 20px;
  width: 24px;
}

.option-text {
  flex: 1;
  font-size: 16px;
  color: #333333;
}

.selected-topics {
  flex-direction: row;
  flex-wrap: wrap;
  gap: 6px;
}

.topic-tag {
  padding: 4px 8px;
  background-color: #007AFF;
  color: #ffffff;
  font-size: 12px;
  border-radius: 4px;
}
</style>